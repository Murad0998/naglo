import asyncio
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile
import requests
from yookassa import Configuration, Payment
from datetime import datetime
import json
import sqlite3
from aiogram import Bot, Dispatcher, types, F, Router  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç F
from aiogram.filters import Command
from aiogram.types import Message
import qrcode
from io import BytesIO
import uuid
from dv import restart,start_markup,start_markup4
DATABASE_FILE = "database6.db"
ADMIN_IDS = [5510185795,1097080977]
SHOP_ID = '1060209'
API_KEY = 'test_bMjswdy-LXNQQCYYlmt4D4B_o2412I7rpkHsYqetirg'
Configuration.account_id = '1060209'    # –Ω–∞–ø—Ä–∏–º–µ—Ä, "1020973"
Configuration.secret_key = 'test_bMjswdy-LXNQQCYYlmt4D4B_o2412I7rpkHsYqetirg'
SECOND_BOT_USERNAME = "Stud_VPN_bot"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞
from data import (create_database, add_event, get_event, get_all_events,register_participant,verify_ticket,save_ticket,check_ticket_status,mark_ticket_as_scanned,cleanup_past_events)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7741421068:AAEES9SMSegfN1IidcvobaSGpvz7AZ8oLM4"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)
router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class EventCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_date = State()
    waiting_for_location = State()
    waiting_for_max_participants = State()
    waiting_for_photo = State()
    waiting_for_standard_price = State()
    waiting_for_fasttrack_price = State()
    waiting_for_vip_price = State()

class UserSetup(StatesGroup):
    waiting_for_first_name = State()  # –ò–º—è
    waiting_for_last_name = State()   # –§–∞–º–∏–ª–∏—è
    waiting_for_middle_name = State() # –û—Ç—á–µ—Å—Ç–≤–æ
    waiting_for_status = State()      # –°—Ç–∞—Ç—É—Å



@dp.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    print(1)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT first_name, last_name, relationship_status FROM users WHERE user_id = ?", (message.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()

    if not user_data:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        await state.set_state(UserSetup.waiting_for_first_name)
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ, —á—Ç–æ–± –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç –∏ –ø—Ä–æ–π—Ç–∏ –ø–æ –Ω–µ–º—É –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫—É.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        buttons = await get_main_menu(message.from_user.id)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=buttons
        )


@dp.message(UserSetup.waiting_for_first_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await state.set_state(UserSetup.waiting_for_last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")


@dp.message(UserSetup.waiting_for_last_name)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await state.set_state(UserSetup.waiting_for_middle_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")


@dp.message(UserSetup.waiting_for_middle_name)
async def process_middle_name(message: Message, state: FSMContext):
    middle_name = message.text.strip()
    if middle_name == '-':
        middle_name = None
    await state.update_data(middle_name=middle_name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç—É—Å–∞
    await state.set_state(UserSetup.waiting_for_status)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [types.KeyboardButton(text="–ò—â—É –æ—Ç–Ω–æ—à–µ–Ω–∏—è"), types.KeyboardButton(text="–ó–∞–Ω—è—Ç")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫):", reply_markup=keyboard)


@dp.message(UserSetup.waiting_for_status)
async def process_status(message: Message, state: FSMContext):
    if message.text not in ["–ò—â—É –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–ó–∞–Ω—è—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö (–ò—â—É –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–ª–∏ –ó–∞–Ω—è—Ç).")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, first_name, last_name, middle_name, relationship_status) 
        VALUES (?, ?, ?, ?, ?)
    ''', (
        message.from_user.id,
        user_data.get('first_name'),
        user_data.get('last_name'),
        user_data.get('middle_name'),
        message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    ))

    conn.commit()
    conn.close()

    await state.clear()

    # –°–æ–æ–±—â–∞–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    buttons = await get_main_menu(message.from_user.id)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
        reply_markup=buttons
    )

async def get_main_menu(user_id: int) -> types.ReplyKeyboardMarkup:
    if user_id in ADMIN_IDS:
        # –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        keyboard = types.ReplyKeyboardMarkup(keyboard=[
            [types.KeyboardButton(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
            [types.KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")],
            [types.KeyboardButton(text="üé´ –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")],
            [types.KeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –±–∏–ª–µ—Ç")],
           # [types.KeyboardButton(text="–î–∞–π–≤")],
            [types.KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")],  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
            [types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ], resize_keyboard=True)
    else:
        # –ú–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = types.ReplyKeyboardMarkup(keyboard=[
            [types.KeyboardButton(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
            [types.KeyboardButton(text="üé´ –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")],
           # [types.KeyboardButton(text="–î–∞–π–≤")],
            [types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ], resize_keyboard=True)

    return keyboard



@dp.message(F.text == "–î–∞–π–≤")
async def redirect_to_second_bot(message: Message):
    print(1)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞
    # second_bot_link = f'https://t.me/{SECOND_BOT_USERNAME}?start'
    # markup = types.InlineKeyboardMarkup()
    # button1 = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫–æ –≤—Ç–æ—Ä–æ–º—É –±–æ—Ç—É", url=second_bot_link)
    # markup.add(button1)
    # await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫–æ –≤—Ç–æ—Ä–æ–º—É –±–æ—Ç—É:", reply_markup=markup)


@dp.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def show_events(message: Message):
    events = await get_all_events()

    if not events:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return

    for event in events:
        text = (
            f"üéâ *{event['title']}*\n"
            f"üìù {event['description']}\n"
            f"üìÖ {event['date_time']}\n"
            f"üìç {event['location']}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {event['current_participants']}/{event['max_participants']}\n"
        )

        # –î–µ–±–∞–≥ photo_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("Photo ID: ", event['photo_id'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ file_id –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–º
        if event['photo_id']:
            try:
                await message.answer_photo(
                    photo=event['photo_id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –∏–∑ –ë–î
                    caption=text,
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                                    callback_data=f"show_tickets_{event['event_id']}",
                                )
                            ]
                        ]
                    ),
                    parse_mode="Markdown",
                )
            except Exception as e:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
        else:
            await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")



@dp.callback_query(lambda c: c.data.startswith('show_tickets_'))
async def show_ticket_options(callback_query: types.CallbackQuery):
    event_id = callback_query.data.split('_')[2]
    event = await get_event(event_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"–°—Ç–∞–Ω–¥–∞—Ä—Ç - {event['standard_price']} —Ä—É–±.",
            callback_data=f"register_{event_id}_standard"
        )],
        [types.InlineKeyboardButton(
            text=f"–§–∞—Å—Ç-—Ç—Ä–µ–∫ - {event['fasttrack_price']} —Ä—É–±.",
            callback_data=f"register_{event_id}_fasttrack"
        )],
        [types.InlineKeyboardButton(
            text=f"VIP - {event['vip_price']} —Ä—É–±.",
            callback_data=f"register_{event_id}_vip"
        )]
    ])

    await callback_query.message.edit_reply_markup(reply_markup=keyboard)


@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def create_event_start(message: Message, state: FSMContext):
    await state.set_state(EventCreation.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@dp.message(EventCreation.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(EventCreation.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@dp.message(EventCreation.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(EventCreation.waiting_for_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")


@dp.message(EventCreation.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, '%Y-%m-%d %H:%M')
        await state.update_data(date_time=message.text)
        await state.set_state(EventCreation.waiting_for_location)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")


@dp.message(EventCreation.waiting_for_location)
async def process_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(EventCreation.waiting_for_max_participants)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")


@dp.message(EventCreation.waiting_for_max_participants)
async def process_max_participants(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(max_participants=int(message.text))
    await state.set_state(EventCreation.waiting_for_photo)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@dp.message(EventCreation.waiting_for_photo)
async def process_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        return

    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    await state.set_state(EventCreation.waiting_for_standard_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):")


@dp.message(EventCreation.waiting_for_standard_price)
async def process_standard_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        return

    await state.update_data(standard_price=int(message.text))
    await state.set_state(EventCreation.waiting_for_fasttrack_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å Fast-Track –±–∏–ª–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):")


@dp.message(EventCreation.waiting_for_fasttrack_price)
async def process_fasttrack_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        return

    await state.update_data(fasttrack_price=int(message.text))
    await state.set_state(EventCreation.waiting_for_vip_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å VIP –±–∏–ª–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):")


@dp.message(EventCreation.waiting_for_vip_price)
async def process_vip_price(message: Message, state: FSMContext):
    try:
        vip_price = int(message.text)
        data = await state.get_data()

        event_id = await add_event(
            title=data['title'],
            description=data['description'],
            date_time=data['date_time'],
            location=data['location'],
            max_participants=data['max_participants'],
            photo_id=data['photo_id'],
            standard_price=data['standard_price'],
            fasttrack_price=data['fasttrack_price'],
            vip_price=vip_price
        )

        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
        await state.clear()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
async def generate_qr_code_start(ticket_data: dict) -> BytesIO:
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∏–ª–µ—Ç–∞
    ticket_id = ticket_data.get('ticket_id', str(uuid.uuid4()))

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    user_id = ticket_data['user_id']

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–§–ò–û –∏ —Å—Ç–∞—Ç—É—Å)
    cursor.execute('''
        SELECT first_name, last_name, middle_name, relationship_status
        FROM users
        WHERE user_id = ?
    ''', (user_id,))
    user_data = cursor.fetchone()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if not user_data:
        conn.close()
        raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞.")

    # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    first_name, last_name, middle_name, relationship_status = user_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–∞
    cursor.execute('''
        SELECT scanned
        FROM tickets
        WHERE ticket_id = ?
    ''', (ticket_id,))
    result = cursor.fetchone()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞
    qr_data = {
        "ticket_id": ticket_id,
        "ticket_type": ticket_data['ticket_type'],
        "event_date": ticket_data['event_date'],
        "first_name": first_name,
        "last_name": last_name,
        "middle_name": middle_name or '',  # –ï—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        "status": relationship_status,
        "scanned": bool(result[0]) if result else False,
    }

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON —Å—Ç—Ä–æ–∫—É
    qr_json = json.dumps(qr_data, ensure_ascii=False)

    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    buffer = BytesIO()
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(qr_json)
    qr.make(fit=True)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞
    qr_image = qr.make_image(fill_color="black", back_color="white")
    qr_image.save(buffer, format="PNG")
    buffer.seek(0)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–ª–µ—Ç –≤ –±–∞–∑—É
    await save_ticket(ticket_id, ticket_data)

    return buffer, ticket_id


# @dp.callback_query(lambda c: c.data.startswith('register_'))
# async def process_registration(callback_query: types.CallbackQuery):
#     _, event_id, ticket_type = callback_query.data.split('_')
#     user_id = callback_query.from_user.id
#
#     # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
#     success = await register_participant(event_id, user_id, ticket_type)
#
#     if not success:
#         await callback_query.answer(
#             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.",
#             show_alert=True
#         )
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
#     event = await get_event(event_id)
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∏–ª–µ—Ç–∞
#     ticket_data = {
#         'event_id': event_id,
#         'event_title': event['title'],
#         'ticket_type': ticket_type,
#         'user_id': user_id,
#         'event_date': event['date_time']
#     }
#     ticket_id = ticket_data.get('ticket_id', str(uuid.uuid4()))
#     try:
#         # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
#         qr_buffer, ticket_id = await generate_qr_code_start(ticket_data)
#         caption = (
#             f"üé´ *–í–∞—à –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ*\n\n"
#             f"üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']}\n"
#             f"üìÖ –î–∞—Ç–∞: {event['date_time']}\n"
#             f"üìç –ú–µ—Å—Ç–æ: {event['location']}\n"
#             f"üéüÔ∏è –¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}\n"
#             f"üîë ID –±–∏–ª–µ—Ç–∞: `{ticket_id}`\n\n"
#             f"_–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥, –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–∞–º –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ_"
#         )
#
#         photo = BufferedInputFile(
#             qr_buffer.getvalue(),
#             filename="ticket_qr.png"
#         )
#
#         await callback_query.message.answer_photo(
#             photo=photo,
#             caption=caption,
#             parse_mode="Markdown"
#         )
#
#         await callback_query.answer("–ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
#
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–∞: {e}")
#         await callback_query.answer(
#             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∏–ª–µ—Ç–∞",
#             show_alert=True
#         )


@dp.message(F.text == "üé´ –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
async def show_my_registrations(message: Message):
    user_id = message.from_user.id

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∏–ª–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT ticket_id, ticket_type, title, description, date_time, location, photo_id
        FROM tickets t
        JOIN events e ON t.event_id = e.event_id
        WHERE user_id = ?
    ''', (user_id,))
    tickets = cursor.fetchall()
    conn.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∏–ª–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not tickets:
        await message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        return

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö
    for ticket in tickets:
        ticket_id, ticket_type, title, description, date_time, location, photo_id = ticket

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (f"üéâ *{title}*\n"
                f"üìù {description}\n"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date_time}\n"
                f"üìç –ú–µ—Å—Ç–æ: {location}\n"
                f"üéüÔ∏è –¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}\n")

        # –ï—Å–ª–∏ —É —Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–∏–ø–∞ –±–∏–ª–µ—Ç–∞
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"QR-–∫–æ–¥ ({ticket_type})",
                        callback_data=f"show_qr_{ticket_id}"
                    )
                ]
            ]
        )

        await message.answer_photo(
            photo=photo_id,
            caption=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


@dp.callback_query(lambda callback_query: callback_query.data.startswith('show_qr_'))
async def show_qr_code(callback_query: types.CallbackQuery):
    ticket_id = callback_query.data.split('_')[2]
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–∞ –∏–∑ –±–∞–∑—ã
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT ticket_type, event_id
        FROM tickets
        WHERE ticket_id = ?
    ''', (ticket_id,))
    ticket = cursor.fetchone()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    cursor.execute('''
        SELECT first_name, last_name, middle_name, relationship_status
        FROM users
        WHERE user_id = ?
    ''', (user_id,))
    user_data = cursor.fetchone()
    conn.close()

    if not ticket or not user_data:
        await callback_query.message.edit_text("‚ö†Ô∏è QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    ticket_type, event_id = ticket
    first_name, last_name, middle_name, relationship_status = user_data
    print(first_name)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞
    qr_data = {
        "ticket_id": ticket_id,
        "ticket_type": ticket_type,
        "event_id": event_id,
        "first_name": first_name,
        "last_name": last_name,
        "middle_name": middle_name or '',
        "status": relationship_status,
    }

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    qr_json = json.dumps(qr_data, ensure_ascii=False)
    qr_buffer = await generate_qr_code(qr_json)

    qr_photo = BufferedInputFile(qr_buffer.getvalue(), filename="ticket_qr.png")
    await callback_query.message.answer_photo(
        photo=qr_photo,
        caption=f"üéüÔ∏è –í–∞—à QR-–∫–æ–¥ –¥–ª—è –±–∏–ª–µ—Ç–∞ ({ticket_type})\n"
                f"ID –±–∏–ª–µ—Ç–∞: `{ticket_id}`",
        parse_mode="Markdown"
    )



async def generate_qr_code(qr_json: str) -> BytesIO:
    from io import BytesIO
    import qrcode

    buffer = BytesIO()
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(qr_json)  # –î–æ–±–∞–≤–ª—è–µ–º JSON-—Å—Ç—Ä–æ–∫—É (–≤–∫–ª—é—á–µ–Ω—ã —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã)
    qr.make(fit=True)

    qr_image = qr.make_image(fill_color="black", back_color="white")
    qr_image.save(buffer, format="PNG")
    buffer.seek(0)
    return buffer


@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def user_settings(message: Message):
    user_id = message.from_user.id

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT first_name, last_name, middle_name, relationship_status
        FROM users
        WHERE user_id = ?
    ''', (user_id,))
    user_data = cursor.fetchone()
    conn.close()

    if not user_data:
        await message.answer("‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    first_name, last_name, middle_name, relationship_status = user_data

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = (
        f"‚öôÔ∏è *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n\n"
        f"üë§ –ò–º—è: {first_name}\n"
        f"üë§ –§–∞–º–∏–ª–∏—è: {last_name}\n"
        f"üë§ –û—Ç—á–µ—Å—Ç–≤–æ: {middle_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"‚ù§Ô∏è –°—Ç–∞—Ç—É—Å: {relationship_status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é")],
            [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ"), types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")],
            [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
    )

    await message.answer(text, reply_markup=keyboard)


@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def change_first_name(message: Message, state: FSMContext):
    await state.set_state(UserSetup.waiting_for_first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")

@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é")
async def change_last_name(message: Message, state: FSMContext):
    await state.set_state(UserSetup.waiting_for_last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:")

@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ")
async def change_middle_name(message: Message, state: FSMContext):
    await state.set_state(UserSetup.waiting_for_middle_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")

@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def change_status(message: Message, state: FSMContext):
    await state.set_state(UserSetup.waiting_for_status)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [types.KeyboardButton(text="–ò—â—É –æ—Ç–Ω–æ—à–µ–Ω–∏—è"), types.KeyboardButton(text="–ó–∞–Ω—è—Ç")],
            [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫):", reply_markup=keyboard)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_settings_menu(message: Message):
    buttons = await get_main_menu(message.from_user.id)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=buttons)







#ADMIN
class TicketScanning(StatesGroup):
    waiting_for_ticket_id = State()

@dp.message(F.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –±–∏–ª–µ—Ç")
async def scan_ticket_start(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤.")
        return

    await state.set_state(TicketScanning.waiting_for_ticket_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –±–∏–ª–µ—Ç–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:")


@dp.message(TicketScanning.waiting_for_ticket_id)
async def process_ticket_scanning(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤.")
        return

    ticket_id = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–∞
    ticket_status = await check_ticket_status(ticket_id)

    if not ticket_status:
        await message.answer("‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if ticket_status['scanned']:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!")
        await state.clear()
        return

    # –û—Ç–º–µ—á–∞–µ–º –±–∏–ª–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await mark_ticket_as_scanned(ticket_id)

    await message.answer("‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π!")
    await state.clear()


@dp.message(Command('cleanup'))
async def manual_cleanup(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    deleted_count = await cleanup_past_events()

    if deleted_count > 0:
        await message.answer(
            f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏ –±–∏–ª–µ—Ç–æ–≤."
        )
    else:
        await message.answer("üîç –ü—Ä–æ—à–µ–¥—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def create_payment(event_id: int, ticket_type: str, amount: float) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
    try:
        payment = Payment.create({
            "amount": {
                "value": str(amount),
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/Stud_VPN_bot"  # URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            },
            "capture": True,
            "description": f"–ë–∏–ª–µ—Ç {ticket_type} –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}",
            "metadata": {
                "event_id": event_id,
                "ticket_type": ticket_type,
            }
        })
        return {
            "payment_id": payment.id,
            "payment_url": payment.confirmation.confirmation_url
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None


@dp.callback_query(lambda c: c.data.startswith('register_'))
async def process_registration(callback_query: types.CallbackQuery):
    _, event_id, ticket_type = callback_query.data.split('_')
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    event = await get_event(event_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–∏–ª–µ—Ç–∞
    price_map = {
        'standard': event['standard_price'],
        'fasttrack': event['fasttrack_price'],
        'vip': event['vip_price']
    }
    amount = price_map.get(ticket_type)

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_data = await create_payment(event_id, ticket_type, amount)

    if not payment_data:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏—Ç—å",
            url=payment_data["payment_url"]
        )],
        [types.InlineKeyboardButton(
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=f"check_payment_{payment_data['payment_id']}_{event_id}_{ticket_type}"
        )]
    ])

    await callback_query.message.answer(
        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ {amount} —Ä—É–±.",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data.startswith('check_payment_'))
async def check_payment_status(callback_query: types.CallbackQuery):
    data = callback_query.data[14:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 'check_payment_'

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ—Ñ–∏—Å–∞
    parts = data.rsplit('_', 2)  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ 3 —á–∞—Å—Ç–∏ —Å –∫–æ–Ω—Ü–∞
    if len(parts) != 3:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    payment_id = parts[0]  # –ü–æ–ª–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
    event_id = parts[1]  # ID —Å–æ–±—ã—Ç–∏—è
    ticket_type = parts[2]  # –¢–∏–ø –±–∏–ª–µ—Ç–∞

    url = f"https://api.yookassa.ru/v3/payments/{payment_id}"
    print(payment_id)
    try:
        response = requests.get(
            url,
            auth=(SHOP_ID, API_KEY)
        )
        if response.status_code == 200:
            payment_info = response.json()
            x = payment_info.get('status')


            if x == "succeeded":
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                success = await register_participant(event_id, callback_query.from_user.id, ticket_type)
                print(1)

                if success:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                    event = await get_event(event_id)
                    print(2)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∏–ª–µ—Ç–∞
                    ticket_data = {
                        'event_id': event_id,
                        'event_title': event['title'],
                        'ticket_type': ticket_type,
                        'user_id': callback_query.from_user.id,
                        'event_date': event['date_time']
                    }

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
                    qr_buffer, ticket_id = await generate_qr_code_start(ticket_data)
                    print(3)
                    caption = (
                        f"üé´ *–í–∞—à –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ*\n\n"
                        f"üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']}\n"
                        f"üìÖ –î–∞—Ç–∞: {event['date_time']}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {event['location']}\n"
                        f"üéüÔ∏è –¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}\n"
                        f"üîë ID –±–∏–ª–µ—Ç–∞: `{ticket_id}`"
                    )

                    photo = BufferedInputFile(qr_buffer.getvalue(), filename="ticket_qr.png")
                    print(4)
                    await callback_query.message.answer_photo(
                        photo=photo,
                        caption=caption,
                        parse_mode="Markdown"
                    )

                    await callback_query.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–∏–ª–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
                else:
                    await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞", show_alert=True)
            else:
                await callback_query.answer("–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞", show_alert=True)
        else:
            await callback_query.answer("–û–ø–ª–∞—Ç–∞", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")


async def delete_event(event_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()

        # –£–¥–∞–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
        cursor.execute("DELETE FROM tickets WHERE event_id = ?", (event_id,))

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        cursor.execute("DELETE FROM events WHERE event_id = ?", (event_id,))

        conn.commit()
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        return False


@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def start_event_deletion(message: Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return

    events = await get_all_events()
    if not events:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = [
        [
            types.InlineKeyboardButton(
                text=f"{event['title']} ({event['date_time']})",
                callback_data=f"delete_event_{event['event_id']}"
            )
        ]
        for event in events
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)




@dp.callback_query(lambda c: c.data.startswith("delete_event_"))
async def confirm_event_deletion(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    event_id = int(callback_query.data.split("_")[2])
    event = await get_event(event_id)

    if not event:
        await callback_query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{event_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
        ]
    ])

    await callback_query.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ *{event['title']}*?",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def delete_event_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    event_id = int(callback_query.data.split("_")[2])

    success = await delete_event(event_id)
    if success:
        await callback_query.message.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
    else:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")


@dp.callback_query(lambda c: c.data == "cancel_delete")
async def cancel_event_deletion(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    await callback_query.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ!")


async def main():
    await create_database()
    print(1)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
